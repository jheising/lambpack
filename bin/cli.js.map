{"version":3,"file":"cli.js","sourceRoot":"","sources":["cli.ts"],"names":[],"mappings":";;;AACA,uCAAuC;AACvC,8CAAyC;AACzC,4BAA4B;AAC5B,+CAAsC;AAEtC,IAAI,iBAAiB,CAAC;AACtB,IAAI,iBAAiB,CAAC;AACtB,IAAI,UAAU,CAAC;AAEf,IAAI,WAAW,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAE7C,SAAS;KACJ,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC;KAC5B,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC;KACpC,SAAS,CAAC,yDAAyD,CAAC;KACpE,MAAM,CAAC,UAAU,kBAAkB,EAAE,kBAAkB,EAAE,WAAW;IACjE,iBAAiB,GAAG,kBAAkB,CAAC;IACvC,iBAAiB,GAAG,kBAAkB,CAAC;IACvC,UAAU,GAAG,WAAW,CAAC;AAC7B,CAAC,CAAC;KACD,MAAM,CAAC,aAAa,EAAE,YAAY,CAAC;KACnC,MAAM,CAAC,eAAe,EAAE,4EAA4E,CAAC;KACrG,MAAM,CAAC,mBAAmB,EAAE,8GAA8G,CAAC;KAC3I,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAEzB,EAAE,CAAA,CAAC,CAAC,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAC5D,CAAC;IACG,SAAS,CAAC,UAAU,EAAE,CAAC;IACvB,uBAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC;AAED,uBAAU,CAAC,OAAO,CAAC,iBAAiB,EAAE,UAAU,EAAE,iBAAiB,EAAE,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;IACvI,EAAE,CAAA,CAAC,KAAK,CAAC,CACT,CAAC;QACG,uBAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC;IACX,CAAC;IAED,uBAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC","sourcesContent":["#! /usr/bin/env node\nimport * as commander from \"commander\";\nimport {LambdaPack} from \"../LambdaPack\";\nimport * as _ from \"lodash\";\nimport {terminal} from \"terminal-kit\";\n\nlet lambdaHandlerFile;\nlet outputZipFileName;\nlet otherFiles;\n\nlet packageJSON = require(\"../package.json\");\n\ncommander\n    .version(packageJSON.version)\n    .description(packageJSON.description)\n    .arguments(\"<lambdaHandlerFile> <outputZipFileName> [otherFiles...]\")\n    .action(function (_lambdaHandlerFile, _outputZipFileName, _otherFiles) {\n        lambdaHandlerFile = _lambdaHandlerFile;\n        outputZipFileName = _outputZipFileName;\n        otherFiles = _otherFiles;\n    })\n    .option(\"-q, --quiet\", \"quiet mode\")\n    .option(\"-f, --flatten\", \"flatten the lambda path so the resulting handler is at the root of the zip\")\n    .option(\"-i, --include-aws\", \"include your own aws-sdk (if you depend on it), otherwise the Lambda globally installed version will be used\")\n    .parse(process.argv);\n\nif(_.isNil(lambdaHandlerFile) || _.isNil(outputZipFileName))\n{\n    commander.outputHelp();\n    terminal.processExit(1);\n}\n\nLambdaPack.package(lambdaHandlerFile, otherFiles, outputZipFileName, !commander.quiet, !commander.includeAws, commander.flatten, (error) => {\n    if(error)\n    {\n        terminal.processExit(1);\n        return;\n    }\n\n    terminal.processExit(0);\n});"]}
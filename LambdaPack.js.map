{"version":3,"file":"LambdaPack.js","sourceRoot":"","sources":["LambdaPack.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs-extra\"\nimport {exec} from 'child_process';\nimport * as path from \"path\";\nimport * as _ from \"lodash\";\nimport {terminal} from \"terminal-kit\";\nimport * as async from \"async\";\nimport * as findUp from \"find-up\";\nimport * as tmp from \"tmp\";\nimport * as isBuiltinModule from \"is-builtin-module\";\nimport * as zipper from \"zip-local\";\nimport * as dependencyTree from 'dependency-tree';\n\nexport class LambdaPack {\n    static package(lambdaHandlerFilePath: string, otherFiles: string[], outputFileName: string, outputProgressToConsole: boolean = true, excludeAWSSDK: boolean = true, flatten: boolean = false, callback?: (error: Error) => void) {\n\n        let tmpDir;\n        let baseDir = path.dirname(lambdaHandlerFilePath);\n\n        async.waterfall([\n            // Find a package.json file in the path\n            (done) => {\n                if (outputProgressToConsole) terminal.blue(\"Finding package.json...\\n\");\n                findUp(\"package.json\", {\n                    cwd: baseDir\n                }).then(filepath => {\n\n                    if(_.isNil(filepath))\n                    {\n                        done(\"No package.json file found in parent directory.\");\n                        return;\n                    }\n\n                    if (outputProgressToConsole) terminal(`package.json file ${filepath ? \"was found at \" + filepath : \"was not found\"}\\n`);\n                    baseDir = path.dirname(filepath);\n\n                    done(null, filepath);\n                });\n            },\n            (packageJSONFile, done) => {\n                if (outputProgressToConsole) terminal.blue(\"Determining dependencies...\\n\");\n\n                let installedPackages;\n                let packageJSON: any = {};\n\n                if (packageJSONFile) {\n                    packageJSON = require(packageJSONFile);\n                    installedPackages = packageJSON.dependencies;\n                }\n\n                let requiredModules = {};\n                let requiredFiles = dependencyTree.toList({\n                    filename: lambdaHandlerFilePath,\n                    directory: baseDir,\n                    nodeModulesConfig: {\n                        entry: 'module'\n                    },\n                    filter: (absolutePath) => {\n\n                        let isModule = false;\n                        let match = /\\/node_modules\\/(.+?)\\//.exec(absolutePath);\n\n                        // This is a node module\n                        if(match && match.length >= 2)\n                        {\n                            isModule = true;\n                            let moduleName = match[1];\n                            let moduleVersion = \"*\";\n\n                            if(excludeAWSSDK && moduleName === \"aws-sdk\")\n                            {\n                                return false;\n                            }\n\n                            // Deal with scoped packages\n                            if(moduleName.indexOf(\"@\") !== 0)\n                            {\n                                moduleName = moduleName.replace(/\\/.*$/, \"\");\n                            }\n\n                            // Skip built-in modules and modules already added\n                            if(isBuiltinModule(moduleName) || (moduleName in requiredModules))\n                            {\n                                return false;\n                            }\n\n                            if (installedPackages && installedPackages[moduleName]) {\n                                moduleVersion = installedPackages[moduleName];\n                            }\n\n                            requiredModules[moduleName] = moduleVersion;\n                            if (outputProgressToConsole) terminal(\"Found module: \").green.noFormat(`${moduleName} (${moduleVersion})\\n`);\n                        }\n\n                        return !isModule;\n                    }\n                });\n\n                if (flatten) {\n                    const lambdaHandlerDirectory = path.dirname(lambdaHandlerFilePath);\n                    const invalidDependenciesAfterFlatten = requiredFiles.filter((file) => !file.includes(lambdaHandlerDirectory));\n\n                    if (invalidDependenciesAfterFlatten.length > 0) {\n                        done(\n                            \"Cannot flatten directory since the handler requires relative dependecies which would break after flattening:\\n\" +\n                            invalidDependenciesAfterFlatten.join(\"\\n\") +\n                            \"\\n\\nConsider removing the --flatten or -f option\"\n                        );\n                    }\n                }\n\n                if (outputProgressToConsole)\n                {\n                    for(let file of requiredFiles)\n                    {\n                        terminal(\"Found file: \").green.noFormat(`${file}\\n`);\n                    }\n                }\n\n                done(null, requiredModules, requiredFiles, packageJSON);\n            },\n            (requiredModules, requiredLocalFiles, packageJSON, done) => {\n                // Create a temporary directory\n                tmpDir = tmp.dirSync({\n                    unsafeCleanup: true\n                });\n\n                // Replace the dependencies in the package.json file with the ones we've found\n                packageJSON.dependencies = requiredModules;\n                fs.writeJsonSync(path.join(tmpDir.name, \"package.json\"), packageJSON);\n\n                done(null, requiredLocalFiles)\n            },\n            (requiredLocalFiles, done) => {\n\n                let filesToCopy = _.union(requiredLocalFiles, otherFiles);\n\n                let progressBar;\n                if (outputProgressToConsole) {\n                    if (outputProgressToConsole) terminal.blue(\"Copying source files...\\n\");\n                    progressBar = terminal.progressBar({\n                        width: 80,\n                        items: filesToCopy.length\n                    });\n                }\n\n                async.eachOfSeries(filesToCopy, (file, index, done) => {\n                    let copyToPath = path.join(tmpDir.name, file.replace(baseDir, \"\"));\n                    let filename = path.basename(file);\n\n                    if (flatten) {\n                        const lambdaHandlerDirectory = path.dirname(lambdaHandlerFilePath);\n                        copyToPath = copyToPath.replace(lambdaHandlerDirectory, '');\n                    }\n\n                    if (outputProgressToConsole) progressBar.startItem(filename);\n                    fs.copy(file, copyToPath, (error) => {\n                        if (outputProgressToConsole) progressBar.itemDone(filename);\n                        done(error);\n                    });\n                }, (error) => {\n                    if (outputProgressToConsole) {\n                        progressBar.stop();\n                        terminal.deleteLine(1);\n                    }\n                    done(error);\n                });\n            },\n            // Install all packages\n            (done) => {\n\n                let progressBar;\n                if (outputProgressToConsole) {\n                    if (outputProgressToConsole) terminal.blue(\"Installing packages...\\n\");\n                    progressBar = terminal.progressBar({\n                        width: 80\n                    });\n                }\n\n                exec(\"npm install --production\", {\n                    cwd: tmpDir.name\n                }, (error) => {\n                    if (outputProgressToConsole) {\n                        progressBar.stop();\n                        terminal.deleteLine(1);\n                    }\n                    done(error);\n                });\n            },\n            (done) => {\n                let progressBar;\n                if (outputProgressToConsole) {\n                    if (outputProgressToConsole) terminal.blue(\"Packing it up...\\n\");\n                    progressBar = terminal.progressBar({\n                        width: 80\n                    });\n                }\n\n                fs.ensureDirSync(path.dirname(outputFileName));\n\n                let error;\n                try {\n                    zipper.sync.zip(tmpDir.name + \"/.\").compress().save(path.resolve(baseDir, outputFileName));\n                } catch (err) {\n                    error = err;\n                }\n\n                if (outputProgressToConsole) {\n                    progressBar.stop();\n                    terminal.deleteLine(1);\n                }\n\n                done(error);\n            }\n        ], (error) => {\n\n            function finish()\n            {\n                if (outputProgressToConsole) {\n\n                    if(error)\n                    {\n                        terminal.error.red(`Error: ${error.toString()}`);\n                    }\n                    else\n                    {\n                        const lambdaHandlerFile = path.basename(lambdaHandlerFilePath);\n                        let handlerName = path.relative(baseDir, flatten ? lambdaHandlerFile : lambdaHandlerFilePath);\n                        terminal.blue(\"You can now upload the file \").yellow(outputFileName).blue(\" to AWS Lambda and set the Handler to \").yellow(handlerName).blue(\".\\n\");\n                    }\n                }\n\n                if(callback) callback(error);\n            }\n\n\n            // Remove our temp directory\n            if (tmpDir) {\n                if (outputProgressToConsole) terminal.blue(\"Cleaning up...\\n\");\n                tmpDir.removeCallback(finish);\n            }\n            else\n            {\n                finish();\n            }\n        });\n\n    }\n}"]}